shutdown_costmaps: false
# Jeśli true, to move_base wyłącza costmapy gdy robot nie porusza się.
# Przy false: costmapy działają ciągle – lepsze dla dynamicznych otoczeń (np. mieszkanie),
# bo robot "widzi" przeszkody na bieżąco, nawet w trybie bezczynności.

controller_frequency: 50.0
# [Hz] Jak często lokalny planner (np. DWA/Teb) generuje nowe komendy prędkości.
# ↑ Więcej: płynniejsze sterowanie i szybsza reakcja.
# ↓ Mniej: mniejsze zużycie CPU, ale wolniejsza reakcja i większa oscylacja.

planner_frequency: 1.0
# [Hz] Jak często wywoływany jest globalny planner.
# ↑ Więcej: ścieżka aktualizowana częściej – dobre w dynamicznych środowiskach.
# ↓ Mniej: ścieżka rzadziej odświeżana – może być problem w dynamicznych warunkach.

transform_tolerance: 1.0
# [s] Jak długo `move_base` może „czekać” na transformację TF zanim zgłosi błąd.
# ↑ Więcej: większa tolerancja na opóźnienia (lagi, niezsynchronizowane dane).
# ↓ Mniej: precyzyjne dane, ale większe ryzyko błędów extrapolacji.

planner_patience: 15.0
# [s] Ile czasu `move_base` czeka na udany plan globalny, zanim się podda.
# ↑ Więcej: więcej prób, ale opóźnia reakcję na porażkę.
# ↓ Mniej: szybciej przechodzi do zachowań recovery, ale może za szybko się poddać.

controller_patience: 15.0
# [s] Ile czasu `move_base` czeka, aż lokalny planner (np. DWA) zacznie generować poprawne komendy.
# ↑ Więcej: daje więcej czasu np. na usunięcie przeszkody.
# ↓ Mniej: szybciej podejmuje działania naprawcze (np. obrót/wycofanie).

conservative_reset_dist: 3.0
# [m] Gdy robot utknie, `move_base` wyczyści costmapę w tym promieniu wokół siebie.
# ↑ Więcej: usuwa większy obszar – dobre przy fałszywych przeszkodach (np. poruszających się ludziach).
# ↓ Mniej: ostrożniejsze czyszczenie – mniejsze ryzyko usunięcia realnych przeszkód.

oscillation_timeout: 20.0
# [s] Po jakim czasie oscylacji bez postępu move_base uznaje, że robot utknął.
# ↑ Więcej: więcej prób poprawnego ruchu.
# ↓ Mniej: szybsze wykrycie problemu i uruchomienie recovery behavior.

oscillation_distance: 0.2
# [m] Minimalna odległość, którą robot musi pokonać, żeby uznać, że ruszył.
# Jeśli przez `oscillation_timeout` robot nie pokona tej odległości – uznaje się za „zablokowanego”.

recovery_behavior_enabled: true
# Czy `move_base` ma automatycznie próbować naprawić sytuację (np. wycofać się, obrócić).
# ↑ true: lepsze działanie w realnym świecie – robot sam próbuje się „odblokować”.
# ↓ false: zatrzyma się natychmiast po problemie.

clearing_rotation_allowed: true
# Czy `move_base` może wykonać obrót w miejscu w celu czyszczenia mapy.
# ↑ true: obraca się, żeby lepiej „zobaczyć” przestrzeń wokół.
# ↓ false: może nie ruszyć, jeśli otoczenie nie zostanie wyczyszczone pasywnie.

